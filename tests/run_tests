#!/bin/bash

BUILDSTEP_IMAGE=buildstep
APP_NAME=$1
APP_NAME_CACHE=cache_$1

# cleanup

cd $(dirname $0)/$1

if [[ -x post_deploy ]]; then
    ./post_deploy $1
fi

cleanup() {
    docker logs "$APP_NAME" || true
    docker rm -f "$APP_NAME" || true
    docker rm -f "$APP_NAME_CACHE"
}

# cleanup everything
cleanup

set -xe

# start data container for cache
docker run -v "/cache" --name="$APP_NAME_CACHE" busybox:latest true || true

# build application with empty cache
tar c . | docker run -i --volumes-from="$APP_NAME_CACHE" --name="$APP_NAME" "$BUILDSTEP_IMAGE" bash -c "mkdir -p /app && tar -xC /app && /build/builder"
docker commit "$APP_NAME" "$APP_NAME"
docker rm "$APP_NAME"

# build application with already used cache
tar c . | docker run -i --volumes-from="$APP_NAME_CACHE" --name="$APP_NAME" "$BUILDSTEP_IMAGE" bash -c "mkdir -p /app && tar -xC /app && /build/builder"
docker commit "$APP_NAME" "$APP_NAME"
docker rm "$APP_NAME"

# start docker image
id=$(docker run -d -e PORT=5000 --name "$APP_NAME" "$APP_NAME" "/start")

set +x

# test buildstep image
URL=http://$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' $id):5000/

echo "Checking application at $URL..."

for i in 2 4 8
do
    sleep $i

    if ./check_deploy $URL
    then
        echo "----------------------------------------"
        echo "-----> Deploy SUCCESS ($APP_NAME)!" 
        echo "----------------------------------------"
        exit 0
    fi
done

echo "----------------------------------------"
echo "-----> Deploy FAILED ($APP_NAME)!" 
echo "----------------------------------------"
exit 1
